#!/usr/bin/python --relpath_append ../import syssys.path.insert(0,'..') # adds parent directoryimport numpy as npimport gmshimport pdeimport scipy.sparse as spsimport scipy.sparse.linalgimport timeimport geometriesimport plotly.io as piopio.renderers.default = 'browser'# pio.renderers.default = 'svg'from matplotlib.pyplot import spynp.set_printoptions(threshold = np.inf)np.set_printoptions(linewidth = np.inf)np.set_printoptions(precision = 8)# p,e,t,q = pde.petq_from_gmsh(filename = 'unit_square.geo',hmax = 0.3)# gmsh.initialize()d = 3l = 10gmsh.initialize()gmsh.model.add("Capacitor plates")geometries.unitSquare()gmsh.option.setNumber("Mesh.Algorithm", 2)gmsh.option.setNumber("Mesh.MeshSizeMax", 0.01)gmsh.option.setNumber("Mesh.MeshSizeMin", 0.01)# gmsh.fltk.run()p,e,t,q = pde.petq_generate()MESH = pde.initmesh(p,e,t,q)# TODO:  MESH = pde.refinemesh(p,e,t,q)BASIS = pde.basis()LISTS = pde.lists(MESH)f = lambda x,y : 0*np.sin(np.pi*x)*np.sin(np.pi*y)g1 = lambda x,y : -1+0*xg2 = lambda x,y :  1+0*x# TODO : iwas stimmt net wenn ma quads hat# MAT = pde.assemble.hdiv(MESH, BASIS, LISTS, space = 'BDM1-BDM1'); # D = MAT['BDM1-BDM1']['D'];M0 = pde.assemble.h1(MESH,BASIS,LISTS,dict(space = 'P1', matrix = 'M'))# tm = time.time()# BASIS = pde.basis()# LISTS = pde.lists(MESH)# elapsed = time.time()-tm# print('KEKolving took ' + str(elapsed)[0:6] + ' seconds.')# Kxx, Kyy, Kxy, Kyx = pde.assemb.h1.h1(MESH,BASIS,LISTS,dict(space = 'P1', matrix = 'K'))# Kxx, Kyy, Kxy, Kyx = pde.assemble.h1(MESH, BASIS, LISTS, dict(space = 'P1', matrix = 'K'))# tm = time.time()# M1 = B1@B1.T# elapsed = time.time()-tm# print('1Solving took ' + str(elapsed)[0:6] + ' seconds.')tm = time.time()BM,DM = pde.h1.assemble(MESH,BASIS,LISTS, dict(space = 'P1', matrix = 'M'))# BKx,BKy,DK = pde.h1.assemble(MESH,BASIS,LISTS, dict(space = 'P1', matrix = 'K'))elapsed = time.time()-tmprint('Assembling P1 took ' + str(elapsed)[0:6] + ' seconds.')tm = time.time()MM = BM@DM@BM.Telapsed = time.time()-tmprint('2Solving took ' + str(elapsed)[0:6] + ' seconds.')# tm = time.time()# MM = BM@DM@BM.T# elapsed = time.time()-tm# print('2Solving took ' + str(elapsed)[0:6] + ' seconds.')# B2, D2 = pde.assemb.h1.h1(MESH,BASIS,LISTS,dict(space = 'P1', matrix = 'M'))# tm = time.time()# M2 = B2@D2@B2.T# elapsed = time.time()-tm# print('3Solving took ' + str(elapsed)[0:6] + ' seconds.')# B3, D3 = pde.assemb.h1.h1(MESH,BASIS,LISTS,dict(space = 'P1', matrix = 'M3'))# # BB = B3@(np.sqrt(D3))# tm = time.time()# M3 = B3@D3@B3.T# # M3 = BB@BB.T# elapsed = time.time()-tm# print('4Solving took ' + str(elapsed)[0:6] + ' seconds.')print(sps.linalg.norm(M0-MM))# print(sps.linalg.norm(M0-M1))# print(sps.linalg.norm(M0-M2))# print(sps.linalg.norm(M0-M3))