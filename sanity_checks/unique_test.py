from __future__ import annotationsimport syssys.path.insert(0,'..') # adds parent directorysys.path.insert(0,'../CEM') # adds parent directoryimport numpy as npimport numba as nbimport pandas as pdimport gmshimport pdeimport scipy.sparse as spsimport scipy.sparse.linalgimport timeimport geometriesfrom sksparse.cholmod import choleskyimport plotly.io as piopio.renderers.default = 'browser'from matplotlib.pyplot import spyimport pde.toolsnp.set_printoptions(threshold = np.inf)np.set_printoptions(linewidth = np.inf)np.set_printoptions(precision = 8)gmsh.initialize()gmsh.model.add("Capacitor plates")geometries.unitSquare()gmsh.option.setNumber("Mesh.Algorithm", 2)gmsh.option.setNumber("Mesh.MeshSizeMax", 2)gmsh.option.setNumber("Mesh.MeshSizeMin", 2)gmsh.option.setNumber("Mesh.MeshSizeMax", 0.01)gmsh.option.setNumber("Mesh.MeshSizeMin", 0.01)p,e,t,q = pde.petq_generate()tm = time.time()MESH = pde.mesh(p,e,t,q)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))tm = time.time()p,e,t = MESH.refinemesh()MESH = pde.mesh(p,e,t,q)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))tm = time.time()p,e,t = MESH.refinemesh()MESH = pde.mesh(p,e,t,q)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))tm = time.time()p,e,t = MESH.refinemesh()MESH = pde.mesh(p,e,t,q)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))tm = time.time()p,e,t = MESH.refinemesh()MESH = pde.mesh(p,e,t,q)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))edges_trigs = np.r_[np.c_[t[:,1],t[:,2]],                    np.c_[t[:,2],t[:,0]],                    np.c_[t[:,0],t[:,1]]]edges = np.sort(edges_trigs)print('lets go:')@nb.njit(parallel=True)def nb_argsort(finaltable):    indexTable = np.empty_like(finaltable)    for j in nb.prange(indexTable.shape[1]):        indexTable[:, j] = np.argsort(finaltable[:, j])    return indexTable# def do():# c, d = np.unique(edges,axis=0, return_inverse=True)# tm = time.time()# a,b,_ = pde.tools.nb_unique(edges, axis=0)# elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))# tm = time.time()# b = nb_argsort(edges)# elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))tm = time.time()c,d = pde.tools.unique_rows(edges, return_inverse=True)elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))# tm = time.time()# e = np.lexsort(edges.T)# f = np.argsort(edges.T)# e = pd.unique(edges)# elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))# print(edges.T,'\n')# print(a.T,'\n')# print(b.T,'\n')# print(e.T,'\n')# return a,b,c,d,e    # a,b,c,d,e = do()