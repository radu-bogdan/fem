from __future__ import annotationsimport syssys.path.insert(0,'..') # adds parent directorysys.path.insert(0,'../CEM') # adds parent directoryimport numpy as npimport gmshimport pdeimport scipy.sparse as spsimport scipy.sparse.linalgimport timeimport geometriesfrom sksparse.cholmod import choleskyimport plotly.io as piopio.renderers.default = 'browser'from matplotlib.pyplot import spyimport pde.toolsnp.set_printoptions(threshold = np.inf)np.set_printoptions(linewidth = np.inf)np.set_printoptions(precision = 8)gmsh.initialize()gmsh.model.add("Capacitor plates")geometries.unitSquare()gmsh.option.setNumber("Mesh.Algorithm", 2)gmsh.option.setNumber("Mesh.MeshSizeMax", 0.002)gmsh.option.setNumber("Mesh.MeshSizeMin", 0.002)p,e,t,q = pde.petq_generate()MESH = pde.mesh(p,e,t,q)# p,e,t = MESH.refinemesh()# MESH = pde.mesh(p,e,t,q)# p,e,t = MESH.refinemesh()# MESH = pde.mesh(p,e,t,q)# p,e,t = MESH.refinemesh()# MESH = pde.mesh(p,e,t,q)edges_trigs = np.r_[np.c_[t[:,1],t[:,2]],                    np.c_[t[:,2],t[:,0]],                    np.c_[t[:,0],t[:,1]]]edges = np.sort(edges_trigs)print('lets go:')def do():    # c, d = np.unique(edges,axis=0, return_inverse=True)        tm = time.time()    a,b = np.unique(edges, axis=0, return_inverse=True)    elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))        tm = time.time()    b = pde.tools.nb_unique(edges)    elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))        tm = time.time()    c,d = pde.tools.unique_rows(edges, return_inverse=True)    elapsed = time.time()-tm; print('Took  {:4.8f} seconds.'.format(elapsed))        return a,b,c,d    a,b,c,d = do()